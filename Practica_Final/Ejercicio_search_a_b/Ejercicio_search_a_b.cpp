#include <iostream>
#include <queue>
#include <vector>

using namespace std;
char m[19][19] =
{
    { ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '},
    { ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','b','#','#','#','#','#','#',' ',' '},
    { ' ',' ',' ','#',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' '},
    { ' ',' ','#','#',' ',' ','#',' ',' ',' ','#',' ','#',' ','#',' ','#','#',' '},
    { ' ',' ','#',' ',' ','#','#',' ',' ','#','#',' ','#',' ','#',' ',' ','#',' '},
    { ' ',' ','#',' ',' ','#',' ',' ','#','#',' ',' ','#',' ','#','#',' ','#',' '},
    { ' ','#','#',' ','#','#',' ','#','#',' ',' ','#','#',' ',' ','#',' ','#',' '},
    { ' ','#',' ',' ','#',' ',' ','#','#',' ',' ','#',' ',' ',' ','#',' ','#',' '},
    { ' ','#',' ',' ','#','#',' ',' ','#',' ','#','#',' ','#','#','#',' ','#',' '},
    { ' ','#','#',' ',' ','#',' ',' ','#',' ','#',' ',' ','#',' ',' ',' ','#',' '},
    { ' ',' ','#','#',' ','#','#',' ','#',' ','#',' ',' ','#',' ',' ','#','#',' '},
    { ' ',' ',' ','#','#','#','#','#','#',' ','#','#','#','#','#','#','#',' ',' '},
    { ' ',' ',' ',' ',' ',' ',' ',' ','#',' ','#','#',' ',' ',' ',' ',' ',' ',' '},
    { ' ',' ',' ',' ',' ',' ',' ',' ','#','a','#',' ',' ',' ',' ',' ',' ',' ',' '},
    { ' ',' ','#','#','#','#',' ','#','#','#','#','#',' ',' ',' ',' ',' ',' ',' '},
    { ' ','#','#',' ',' ','#','#','#',' ','#',' ','#','#','#',' ',' ',' ',' ',' '},
    { ' ',' ','#',' ',' ',' ','#',' ',' ','#',' ',' ',' ','#','#',' ',' ',' ',' '},
    { ' ',' ','#',' ',' ',' ',' ',' ',' ','#','#',' ',' ',' ','#','#',' ',' ',' '},
    { ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','#',' ',' ',' ',' ',' ',' ',' ',' '}
};

void printm()
{
    for (int j = 0; j < 19; j++)
    {
        for (int i = 0; i < 19; i++)
            cout << m[j][i] << " ";
        cout << "\n";
    }
}

void search()
{
    int a_y = 13;
    int a_x = 9;
    int b_y = 1;
    int b_x = 10;

    //       posibles
    int dy[] = { -1, 0, 1, 0 };
    int dx[] = { 0, 1, 0, -1 };

    queue<pair<int, int>> q; // :)

    //    dis
    vector<vector<int>> dist(19, vector<int>(19, -1));

    q.push({ a_y, a_x });
    dist[a_y][a_x] = 0;

    // BFS no?
    while (!q.empty())
    {
        int y = q.front().first;
        int x = q.front().second;
        q.pop();

        if (y == b_y && x == b_x) {
            break;
        }

        for (int i = 0; i < 4; i++)
        {


            int ny = y + dy[i];
            int nx = x + dx[i];


            if (ny >= 0 && ny < 19 && nx >= 0 && nx < 19 && dist[ny][nx] == -1)
            {

                if (m[ny][nx] == '#' || (ny == b_y && nx == b_x)) {
                    q.push({ ny, nx });
                    dist[ny][nx] = dist[y][x] + 1;
                }
            }
        }
    }

    int y = b_y;
    int x = b_x;

    while (y != a_y || x != a_x)
    {
        m[y][x] = '.';
        for (int i = 0; i < 4; i++)
        {
            int ny = y + dy[i];
            int nx = x + dx[i];
            if (ny >= 0 && ny < 19 && nx >= 0 && nx < 19 && dist[ny][nx] == dist[y][x] - 1) {
                y = ny;
                x = nx;
                break;
            }
        }
        printm();
    }
    m[a_y][a_x] = 'a';
    m[b_y][b_x] = 'b';
}

int main()
{
    printm();
    search();
    cout << "\n\n\n";
    printm();

    return 0;
}
